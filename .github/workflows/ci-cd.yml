name: GCP CI/CD Pipeline

on:
  push:
    branches: [ fresh-branch, main, master ]
  pull_request:
    branches: [ fresh-branch, main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [ dev, staging, prod ]

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    env:
      DOCKER_REGISTRY: ghcr.io
      IMAGE_NAME: demo-orders-zappy
      KUBE_NAMESPACE: demo-orders-zappy
      GKE_CLUSTER: demo-orders-cluster
      GKE_ZONE: us-central1
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_OWNER: brakebg

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean verify

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: demo-orders-zappy
          path: target/*.jar

      - name: Docker login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Make GHCR image public
        run: |
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/${{ env.GITHUB_REPOSITORY_OWNER }}/packages/container/${{ env.IMAGE_NAME }}/visibility \
            -d '{"visibility":"public"}'

      - name: Set up gcloud + GKE auth plugin
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: gke-gcloud-auth-plugin

      - name: Authenticate with GCP
        env:
          GCP_PROJECT: ${{ env.PROJECT_ID }}
        run: |
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}" | base64 -d > /tmp/gcp-sa-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-sa-key.json
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
          echo "Successfully authenticated with GCP project ${{ env.PROJECT_ID }}"

      - name: Set full image name for deployment
        run: |
          echo "FULL_IMAGE_NAME=ghcr.io/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: Prepare Kubernetes environment
        env:
          DOCKER_PASSWORD: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Delete existing secret if it exists
          kubectl delete secret ghcr-secret -n ${{ env.KUBE_NAMESPACE }} --ignore-not-found=true
          
          # Create Docker registry secret
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.repository_owner }} \
            --docker-password=$DOCKER_PASSWORD \
            --docker-email=no-reply@github.com \
            -n ${{ env.KUBE_NAMESPACE }}
          
          # Verify the secret was created
          kubectl get secret ghcr-secret -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.metadata.name}' | grep ghcr-secret && echo "Secret created successfully" || echo "Failed to create secret"

      - name: Deploy to GKE with Helm
        run: |
          helm upgrade --install demo-orders-zappy ./helm/demo-orders-zappy \
            --namespace ${{ env.KUBE_NAMESPACE }} \
            --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set imagePullSecrets[0].name=ghcr-secret \
            --set springProfile=${{ github.event.inputs.environment || 'dev' }} \
            -f ./helm/demo-orders-zappy/values-${{ github.event.inputs.environment || 'dev' }}.yaml \
            --atomic --timeout 300s --wait --debug

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/demo-orders-zappy -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
          kubectl get deployment demo-orders-zappy -n ${{ env.KUBE_NAMESPACE }} -o wide
          kubectl get service demo-orders-zappy -n ${{ env.KUBE_NAMESPACE }}
          kubectl get ingress -n ${{ env.KUBE_NAMESPACE }} || echo "No ingress found"
